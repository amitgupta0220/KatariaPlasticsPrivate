define(['dart_sdk', 'packages/plugin_platform_interface/plugin_platform_interface.dart', 'packages/firebase_storage_platform_interface/src/full_metadata.dart', 'packages/firebase_storage_platform_interface/src/task_state.dart', 'packages/firebase_storage_platform_interface/src/internal/pointer.dart', 'packages/firebase_storage_platform_interface/src/list_options.dart', 'packages/firebase_storage_platform_interface/src/settable_metadata.dart', 'packages/firebase_storage_platform_interface/src/put_string_format.dart', 'packages/firebase_storage_platform_interface/src/method_channel/utils/exception.dart', 'packages/firebase_core_platform_interface/firebase_core_platform_interface.dart', 'packages/flutter/src/services/system_channels.dart', 'packages/firebase_core/firebase_core.dart'], (function load__packages__firebase_storage_platform_interface__src__platform_interface__platform_interface_task_snapshot_dart(dart_sdk, packages__plugin_platform_interface__plugin_platform_interface$46dart, packages__firebase_storage_platform_interface__src__full_metadata$46dart, packages__firebase_storage_platform_interface__src__task_state$46dart, packages__firebase_storage_platform_interface__src__internal__pointer$46dart, packages__firebase_storage_platform_interface__src__list_options$46dart, packages__firebase_storage_platform_interface__src__settable_metadata$46dart, packages__firebase_storage_platform_interface__src__put_string_format$46dart, packages__firebase_storage_platform_interface__src__method_channel__utils__exception$46dart, packages__firebase_core_platform_interface__firebase_core_platform_interface$46dart, packages__flutter__src__services__system_channels$46dart, packages__firebase_core__firebase_core$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const collection = dart_sdk.collection;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const io = dart_sdk.io;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const plugin_platform_interface = packages__plugin_platform_interface__plugin_platform_interface$46dart.plugin_platform_interface;
  const full_metadata = packages__firebase_storage_platform_interface__src__full_metadata$46dart.src__full_metadata;
  const task_state = packages__firebase_storage_platform_interface__src__task_state$46dart.src__task_state;
  const pointer = packages__firebase_storage_platform_interface__src__internal__pointer$46dart.src__internal__pointer;
  const list_options = packages__firebase_storage_platform_interface__src__list_options$46dart.src__list_options;
  const settable_metadata = packages__firebase_storage_platform_interface__src__settable_metadata$46dart.src__settable_metadata;
  const put_string_format = packages__firebase_storage_platform_interface__src__put_string_format$46dart.src__put_string_format;
  const exception = packages__firebase_storage_platform_interface__src__method_channel__utils__exception$46dart.src__method_channel__utils__exception;
  const firebase_core_platform_interface = packages__firebase_core_platform_interface__firebase_core_platform_interface$46dart.firebase_core_platform_interface;
  const message_codec = packages__flutter__src__services__system_channels$46dart.src__services__message_codec;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  const firebase_core = packages__firebase_core__firebase_core$46dart.firebase_core;
  var platform_interface_task_snapshot = Object.create(dart.library);
  var platform_interface_task = Object.create(dart.library);
  var platform_interface_list_result = Object.create(dart.library);
  var platform_interface_reference = Object.create(dart.library);
  var method_channel_task_snapshot = Object.create(dart.library);
  var method_channel_task = Object.create(dart.library);
  var method_channel_list_result = Object.create(dart.library);
  var method_channel_reference = Object.create(dart.library);
  var method_channel_firebase_storage = Object.create(dart.library);
  var platform_interface_firebase_storage = Object.create(dart.library);
  var firebase_storage_platform_interface = Object.create(dart.library);
  var $_get = dartx._get;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $_set = dartx._set;
  var $containsKey = dartx.containsKey;
  dart._checkModuleNullSafetyMode(false);
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var LinkedHashMapOfStringL$dynamic = () => (LinkedHashMapOfStringL$dynamic = dart.constFn(collection.LinkedHashMap$(StringL(), dart.dynamic)))();
  var Uint8ListL = () => (Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))();
  var CompleterOfvoid = () => (CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))();
  var IdentityMapOfStringL$dynamic = () => (IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(StringL(), dart.dynamic)))();
  var voidToNull = () => (voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))();
  var ObjectL = () => (ObjectL = dart.constFn(dart.legacy(core.Object)))();
  var StackTraceL = () => (StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))();
  var ObjectLAndStackTraceLToNull = () => (ObjectLAndStackTraceLToNull = dart.constFn(dart.fnType(core.Null, [ObjectL(), StackTraceL()])))();
  var TaskSnapshotPlatformL = () => (TaskSnapshotPlatformL = dart.constFn(dart.legacy(platform_interface_task_snapshot.TaskSnapshotPlatform)))();
  var StreamOfTaskSnapshotPlatformL = () => (StreamOfTaskSnapshotPlatformL = dart.constFn(async.Stream$(TaskSnapshotPlatformL())))();
  var StreamLOfTaskSnapshotPlatformL = () => (StreamLOfTaskSnapshotPlatformL = dart.constFn(dart.legacy(StreamOfTaskSnapshotPlatformL())))();
  var FutureOfNull = () => (FutureOfNull = dart.constFn(async.Future$(core.Null)))();
  var FutureLOfNull = () => (FutureLOfNull = dart.constFn(dart.legacy(FutureOfNull())))();
  var TaskSnapshotPlatformLToFutureLOfNull = () => (TaskSnapshotPlatformLToFutureLOfNull = dart.constFn(dart.fnType(FutureLOfNull(), [TaskSnapshotPlatformL()])))();
  var FirebaseExceptionL = () => (FirebaseExceptionL = dart.constFn(dart.legacy(firebase_core_platform_interface.FirebaseException)))();
  var FutureOfTaskSnapshotPlatformL = () => (FutureOfTaskSnapshotPlatformL = dart.constFn(async.Future$(TaskSnapshotPlatformL())))();
  var CompleterOfTaskSnapshotPlatformL = () => (CompleterOfTaskSnapshotPlatformL = dart.constFn(async.Completer$(TaskSnapshotPlatformL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var FutureOfvoid = () => (FutureOfvoid = dart.constFn(async.Future$(dart.void)))();
  var FutureLOfvoid = () => (FutureLOfvoid = dart.constFn(dart.legacy(FutureOfvoid())))();
  var VoidToFutureLOfvoid = () => (VoidToFutureLOfvoid = dart.constFn(dart.fnType(FutureLOfvoid(), [])))();
  var JSArrayOfStringL = () => (JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(StringL())))();
  var MethodChannelReferenceL = () => (MethodChannelReferenceL = dart.constFn(dart.legacy(method_channel_reference.MethodChannelReference)))();
  var StringLToMethodChannelReferenceL = () => (StringLToMethodChannelReferenceL = dart.constFn(dart.fnType(MethodChannelReferenceL(), [StringL()])))();
  var FutureOrOfStringL = () => (FutureOrOfStringL = dart.constFn(async.FutureOr$(StringL())))();
  var FutureOrLOfStringL = () => (FutureOrLOfStringL = dart.constFn(dart.legacy(FutureOrOfStringL())))();
  var FullMetadataL = () => (FullMetadataL = dart.constFn(dart.legacy(full_metadata.FullMetadata)))();
  var ListOfStringL = () => (ListOfStringL = dart.constFn(core.List$(StringL())))();
  var ListResultPlatformL = () => (ListResultPlatformL = dart.constFn(dart.legacy(platform_interface_list_result.ListResultPlatform)))();
  var StreamControllerOfTaskSnapshotPlatformL = () => (StreamControllerOfTaskSnapshotPlatformL = dart.constFn(async.StreamController$(TaskSnapshotPlatformL())))();
  var MapL = () => (MapL = dart.constFn(dart.legacy(core.Map)))();
  var MethodCallL = () => (MethodCallL = dart.constFn(dart.legacy(message_codec.MethodCall)))();
  var MethodCallLToFutureLOfvoid = () => (MethodCallLToFutureLOfvoid = dart.constFn(dart.fnType(FutureLOfvoid(), [MethodCallL()])))();
  var MethodChannelFirebaseStorageL = () => (MethodChannelFirebaseStorageL = dart.constFn(dart.legacy(method_channel_firebase_storage.MethodChannelFirebaseStorage)))();
  var IdentityMapOfStringL$MethodChannelFirebaseStorageL = () => (IdentityMapOfStringL$MethodChannelFirebaseStorageL = dart.constFn(_js_helper.IdentityMap$(StringL(), MethodChannelFirebaseStorageL())))();
  var StreamControllerLOfTaskSnapshotPlatformL = () => (StreamControllerLOfTaskSnapshotPlatformL = dart.constFn(dart.legacy(StreamControllerOfTaskSnapshotPlatformL())))();
  var IdentityMapOfintL$StreamControllerLOfTaskSnapshotPlatformL = () => (IdentityMapOfintL$StreamControllerLOfTaskSnapshotPlatformL = dart.constFn(_js_helper.IdentityMap$(intL(), StreamControllerLOfTaskSnapshotPlatformL())))();
  const CT = Object.create(null);
  var L4 = "file:///C:/Users/Dell/AppData/Roaming/Pub/Cache/hosted/pub.dartlang.org/firebase_storage_platform_interface-1.0.2/lib/src/platform_interface/platform_interface_list_result.dart";
  var L2 = "file:///C:/Users/Dell/AppData/Roaming/Pub/Cache/hosted/pub.dartlang.org/firebase_storage_platform_interface-1.0.2/lib/src/platform_interface/platform_interface_task.dart";
  var L14 = "package:firebase_storage_platform_interface/src/method_channel/method_channel_firebase_storage.dart";
  var L12 = "file:///C:/Users/Dell/AppData/Roaming/Pub/Cache/hosted/pub.dartlang.org/firebase_storage_platform_interface-1.0.2/lib/src/platform_interface/platform_interface_firebase_storage.dart";
  var L13 = "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_firebase_storage.dart";
  var L0 = "file:///C:/Users/Dell/AppData/Roaming/Pub/Cache/hosted/pub.dartlang.org/firebase_storage_platform_interface-1.0.2/lib/src/platform_interface/platform_interface_task_snapshot.dart";
  var L5 = "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_list_result.dart";
  var L10 = "package:firebase_storage_platform_interface/src/method_channel/method_channel_list_result.dart";
  var L9 = "package:firebase_storage_platform_interface/src/method_channel/method_channel_task.dart";
  var L3 = "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_task.dart";
  var L7 = "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_reference.dart";
  var L8 = "package:firebase_storage_platform_interface/src/method_channel/method_channel_task_snapshot.dart";
  var L1 = "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_task_snapshot.dart";
  var L6 = "file:///C:/Users/Dell/AppData/Roaming/Pub/Cache/hosted/pub.dartlang.org/firebase_storage_platform_interface-1.0.2/lib/src/platform_interface/platform_interface_reference.dart";
  var L11 = "package:firebase_storage_platform_interface/src/method_channel/method_channel_reference.dart";
  dart.defineLazy(CT, {
    get C2() {
      return C2 = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C1() {
      return C1 = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C2 || CT.C2
      });
    },
    get C0() {
      return C0 = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C1 || CT.C1,
        [MethodChannel_name]: "plugins.flutter.io/firebase_storage"
      });
    }
  }, false);
  var _state$ = dart.privateName(platform_interface_task_snapshot, "_state");
  var _data$ = dart.privateName(platform_interface_task_snapshot, "_data");
  platform_interface_task_snapshot.TaskSnapshotPlatform = class TaskSnapshotPlatform extends plugin_platform_interface.PlatformInterface {
    static verifyExtends(instance) {
      if (!(instance != null)) dart.assertFailed(null, L0, 26, 12, "instance != null");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_task_snapshot.TaskSnapshotPlatform._token);
    }
    get bytesTransferred() {
      return intL().as(this[_data$][$_get]("bytesTransferred"));
    }
    get metadata() {
      return this[_data$][$_get]("metadata") == null ? null : new full_metadata.FullMetadata.new(LinkedHashMapOfStringL$dynamic().from(core.Map.as(this[_data$][$_get]("metadata"))));
    }
    get ref() {
      dart.throw(new core.UnimplementedError.new("ref is not implemented"));
    }
    get state() {
      return this[_state$];
    }
    get totalBytes() {
      return intL().as(this[_data$][$_get]("totalBytes"));
    }
  };
  (platform_interface_task_snapshot.TaskSnapshotPlatform.new = function(_state, _data) {
    this[_state$] = _state;
    this[_data$] = _data;
    platform_interface_task_snapshot.TaskSnapshotPlatform.__proto__.new.call(this, {token: platform_interface_task_snapshot.TaskSnapshotPlatform._token});
    ;
  }).prototype = platform_interface_task_snapshot.TaskSnapshotPlatform.prototype;
  dart.addTypeTests(platform_interface_task_snapshot.TaskSnapshotPlatform);
  dart.addTypeCaches(platform_interface_task_snapshot.TaskSnapshotPlatform);
  dart.setGetterSignature(platform_interface_task_snapshot.TaskSnapshotPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_task_snapshot.TaskSnapshotPlatform.__proto__),
    bytesTransferred: dart.legacy(core.int),
    metadata: dart.legacy(full_metadata.FullMetadata),
    ref: dart.legacy(platform_interface_reference.ReferencePlatform),
    state: dart.legacy(task_state.TaskState),
    totalBytes: dart.legacy(core.int)
  }));
  dart.setLibraryUri(platform_interface_task_snapshot.TaskSnapshotPlatform, L1);
  dart.setFieldSignature(platform_interface_task_snapshot.TaskSnapshotPlatform, () => ({
    __proto__: dart.getFields(platform_interface_task_snapshot.TaskSnapshotPlatform.__proto__),
    [_state$]: dart.finalFieldType(dart.legacy(task_state.TaskState)),
    [_data$]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))
  }));
  dart.defineLazy(platform_interface_task_snapshot.TaskSnapshotPlatform, {
    /*platform_interface_task_snapshot.TaskSnapshotPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, true);
  platform_interface_task.TaskPlatform = class TaskPlatform extends plugin_platform_interface.PlatformInterface {
    static verifyExtends(instance) {
      if (!(instance != null)) dart.assertFailed(null, L2, 24, 12, "instance != null");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_task.TaskPlatform._token);
    }
    get snapshotEvents() {
      dart.throw(new core.UnimplementedError.new("snapshotEvents is not implemented"));
    }
    get snapshot() {
      dart.throw(new core.UnimplementedError.new("snapshot is not implemented"));
    }
    get onComplete() {
      dart.throw(new core.UnimplementedError.new("onComplete is not implemented"));
    }
    pause() {
      dart.throw(new core.UnimplementedError.new("pause() is not implemented"));
    }
    resume() {
      dart.throw(new core.UnimplementedError.new("resume() is not implemented"));
    }
    cancel() {
      dart.throw(new core.UnimplementedError.new("cancel() is not implemented"));
    }
  };
  (platform_interface_task.TaskPlatform.new = function() {
    platform_interface_task.TaskPlatform.__proto__.new.call(this, {token: platform_interface_task.TaskPlatform._token});
    ;
  }).prototype = platform_interface_task.TaskPlatform.prototype;
  dart.addTypeTests(platform_interface_task.TaskPlatform);
  dart.addTypeCaches(platform_interface_task.TaskPlatform);
  dart.setMethodSignature(platform_interface_task.TaskPlatform, () => ({
    __proto__: dart.getMethods(platform_interface_task.TaskPlatform.__proto__),
    pause: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    resume: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    cancel: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [])
  }));
  dart.setGetterSignature(platform_interface_task.TaskPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_task.TaskPlatform.__proto__),
    snapshotEvents: dart.legacy(async.Stream$(dart.legacy(platform_interface_task_snapshot.TaskSnapshotPlatform))),
    snapshot: dart.legacy(platform_interface_task_snapshot.TaskSnapshotPlatform),
    onComplete: dart.legacy(async.Future$(dart.legacy(platform_interface_task_snapshot.TaskSnapshotPlatform)))
  }));
  dart.setLibraryUri(platform_interface_task.TaskPlatform, L3);
  dart.defineLazy(platform_interface_task.TaskPlatform, {
    /*platform_interface_task.TaskPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, true);
  var storage$ = dart.privateName(platform_interface_list_result, "ListResultPlatform.storage");
  var nextPageToken$ = dart.privateName(platform_interface_list_result, "ListResultPlatform.nextPageToken");
  platform_interface_list_result.ListResultPlatform = class ListResultPlatform extends plugin_platform_interface.PlatformInterface {
    get storage() {
      return this[storage$];
    }
    set storage(value) {
      super.storage = value;
    }
    get nextPageToken() {
      return this[nextPageToken$];
    }
    set nextPageToken(value) {
      super.nextPageToken = value;
    }
    static verifyExtends(instance) {
      if (!(instance != null)) dart.assertFailed(null, L4, 22, 12, "instance != null");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_list_result.ListResultPlatform._token);
    }
    get items() {
      dart.throw(new core.UnimplementedError.new("items is not implemented"));
    }
    get prefixes() {
      dart.throw(new core.UnimplementedError.new("prefixes is not implemented"));
    }
  };
  (platform_interface_list_result.ListResultPlatform.new = function(storage, nextPageToken) {
    this[storage$] = storage;
    this[nextPageToken$] = nextPageToken;
    platform_interface_list_result.ListResultPlatform.__proto__.new.call(this, {token: platform_interface_list_result.ListResultPlatform._token});
    ;
  }).prototype = platform_interface_list_result.ListResultPlatform.prototype;
  dart.addTypeTests(platform_interface_list_result.ListResultPlatform);
  dart.addTypeCaches(platform_interface_list_result.ListResultPlatform);
  dart.setGetterSignature(platform_interface_list_result.ListResultPlatform, () => ({
    __proto__: dart.getGetters(platform_interface_list_result.ListResultPlatform.__proto__),
    items: dart.legacy(core.List$(dart.legacy(platform_interface_reference.ReferencePlatform))),
    prefixes: dart.legacy(core.List$(dart.legacy(platform_interface_reference.ReferencePlatform)))
  }));
  dart.setLibraryUri(platform_interface_list_result.ListResultPlatform, L5);
  dart.setFieldSignature(platform_interface_list_result.ListResultPlatform, () => ({
    __proto__: dart.getFields(platform_interface_list_result.ListResultPlatform.__proto__),
    storage: dart.finalFieldType(dart.legacy(platform_interface_firebase_storage.FirebaseStoragePlatform)),
    nextPageToken: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(platform_interface_list_result.ListResultPlatform, {
    /*platform_interface_list_result.ListResultPlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, true);
  var _pointer = dart.privateName(platform_interface_reference, "_pointer");
  var storage$0 = dart.privateName(platform_interface_reference, "ReferencePlatform.storage");
  platform_interface_reference.ReferencePlatform = class ReferencePlatform extends plugin_platform_interface.PlatformInterface {
    get storage() {
      return this[storage$0];
    }
    set storage(value) {
      super.storage = value;
    }
    static verifyExtends(instance) {
      if (!(instance != null)) dart.assertFailed(null, L6, 31, 12, "instance != null");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_reference.ReferencePlatform._token);
    }
    get bucket() {
      return this.storage.bucket;
    }
    get fullPath() {
      return this[_pointer].path;
    }
    get name() {
      return this[_pointer].name;
    }
    get parent() {
      let parentPath = this[_pointer].parent;
      if (parentPath == null) {
        return null;
      }
      return this.storage.ref(parentPath);
    }
    get root() {
      return this.storage.ref("/");
    }
    child(path) {
      return this.storage.ref(this[_pointer].child(path));
    }
    delete() {
      dart.throw(new core.UnimplementedError.new("delete() is not implemented"));
    }
    getDownloadURL() {
      dart.throw(new core.UnimplementedError.new("getDownloadURL() is not implemented"));
    }
    getMetadata() {
      dart.throw(new core.UnimplementedError.new("getMetadata() is not implemented"));
    }
    list(options) {
      dart.throw(new core.UnimplementedError.new("list() is not implemented"));
    }
    listAll() {
      dart.throw(new core.UnimplementedError.new("listAll() is not implemented"));
    }
    getData(maxSize) {
      return async.async(Uint8ListL(), function* getData() {
        dart.throw(new core.UnimplementedError.new("getData() is not implemented"));
      });
    }
    putData(data, metadata = null) {
      dart.throw(new core.UnimplementedError.new("putData() is not implemented"));
    }
    putBlob(data, metadata = null) {
      dart.throw(new core.UnimplementedError.new("putBlob() is not implemented"));
    }
    putFile(file, metadata = null) {
      dart.throw(new core.UnimplementedError.new("putFile() is not implemented"));
    }
    putString(data, format, metadata = null) {
      dart.throw(new core.UnimplementedError.new("putString() is not implemented"));
    }
    updateMetadata(metadata) {
      dart.throw(new core.UnimplementedError.new("updateMetadata() is not implemented"));
    }
    writeToFile(file) {
      dart.throw(new core.UnimplementedError.new("writeToFile() is not implemented"));
    }
  };
  (platform_interface_reference.ReferencePlatform.new = function(storage, path) {
    this[storage$0] = storage;
    this[_pointer] = new pointer.Pointer.new(path);
    platform_interface_reference.ReferencePlatform.__proto__.new.call(this, {token: platform_interface_reference.ReferencePlatform._token});
    ;
  }).prototype = platform_interface_reference.ReferencePlatform.prototype;
  dart.addTypeTests(platform_interface_reference.ReferencePlatform);
  dart.addTypeCaches(platform_interface_reference.ReferencePlatform);
  dart.setMethodSignature(platform_interface_reference.ReferencePlatform, () => ({
    __proto__: dart.getMethods(platform_interface_reference.ReferencePlatform.__proto__),
    child: dart.fnType(dart.legacy(platform_interface_reference.ReferencePlatform), [dart.legacy(core.String)]),
    delete: dart.fnType(dart.legacy(async.Future$(dart.void)), []),
    getDownloadURL: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), []),
    getMetadata: dart.fnType(dart.legacy(async.Future$(dart.legacy(full_metadata.FullMetadata))), []),
    list: dart.fnType(dart.legacy(async.Future$(dart.legacy(platform_interface_list_result.ListResultPlatform))), [dart.legacy(list_options.ListOptions)]),
    listAll: dart.fnType(dart.legacy(async.Future$(dart.legacy(platform_interface_list_result.ListResultPlatform))), []),
    getData: dart.fnType(dart.legacy(async.Future$(dart.legacy(typed_data.Uint8List))), [dart.legacy(core.int)]),
    putData: dart.fnType(dart.legacy(platform_interface_task.TaskPlatform), [dart.legacy(typed_data.Uint8List)], [dart.legacy(settable_metadata.SettableMetadata)]),
    putBlob: dart.fnType(dart.legacy(platform_interface_task.TaskPlatform), [dart.dynamic], [dart.legacy(settable_metadata.SettableMetadata)]),
    putFile: dart.fnType(dart.legacy(platform_interface_task.TaskPlatform), [dart.legacy(io.File)], [dart.legacy(settable_metadata.SettableMetadata)]),
    putString: dart.fnType(dart.legacy(platform_interface_task.TaskPlatform), [dart.legacy(core.String), dart.legacy(put_string_format.PutStringFormat)], [dart.legacy(settable_metadata.SettableMetadata)]),
    updateMetadata: dart.fnType(dart.legacy(async.Future$(dart.legacy(full_metadata.FullMetadata))), [dart.legacy(settable_metadata.SettableMetadata)]),
    writeToFile: dart.fnType(dart.legacy(platform_interface_task.TaskPlatform), [dart.legacy(io.File)])
  }));
  dart.setGetterSignature(platform_interface_reference.ReferencePlatform, () => ({
    __proto__: dart.getGetters(platform_interface_reference.ReferencePlatform.__proto__),
    bucket: dart.legacy(core.String),
    fullPath: dart.legacy(core.String),
    name: dart.legacy(core.String),
    parent: dart.legacy(platform_interface_reference.ReferencePlatform),
    root: dart.legacy(platform_interface_reference.ReferencePlatform)
  }));
  dart.setLibraryUri(platform_interface_reference.ReferencePlatform, L7);
  dart.setFieldSignature(platform_interface_reference.ReferencePlatform, () => ({
    __proto__: dart.getFields(platform_interface_reference.ReferencePlatform.__proto__),
    [_pointer]: dart.fieldType(dart.legacy(pointer.Pointer)),
    storage: dart.finalFieldType(dart.legacy(platform_interface_firebase_storage.FirebaseStoragePlatform))
  }));
  dart.defineLazy(platform_interface_reference.ReferencePlatform, {
    /*platform_interface_reference.ReferencePlatform._token*/get _token() {
      return new core.Object.new();
    }
  }, true);
  var _data$0 = dart.privateName(method_channel_task_snapshot, "_data");
  var storage$1 = dart.privateName(method_channel_task_snapshot, "MethodChannelTaskSnapshot.storage");
  method_channel_task_snapshot.MethodChannelTaskSnapshot = class MethodChannelTaskSnapshot extends platform_interface_task_snapshot.TaskSnapshotPlatform {
    get storage() {
      return this[storage$1];
    }
    set storage(value) {
      super.storage = value;
    }
    get ref() {
      return new method_channel_reference.MethodChannelReference.new(this.storage, StringL().as(this[_data$0][$_get]("path")));
    }
  };
  (method_channel_task_snapshot.MethodChannelTaskSnapshot.new = function(storage, state, _data) {
    this[storage$1] = storage;
    this[_data$0] = _data;
    method_channel_task_snapshot.MethodChannelTaskSnapshot.__proto__.new.call(this, state, _data);
    ;
  }).prototype = method_channel_task_snapshot.MethodChannelTaskSnapshot.prototype;
  dart.addTypeTests(method_channel_task_snapshot.MethodChannelTaskSnapshot);
  dart.addTypeCaches(method_channel_task_snapshot.MethodChannelTaskSnapshot);
  dart.setLibraryUri(method_channel_task_snapshot.MethodChannelTaskSnapshot, L8);
  dart.setFieldSignature(method_channel_task_snapshot.MethodChannelTaskSnapshot, () => ({
    __proto__: dart.getFields(method_channel_task_snapshot.MethodChannelTaskSnapshot.__proto__),
    storage: dart.finalFieldType(dart.legacy(platform_interface_firebase_storage.FirebaseStoragePlatform)),
    [_data$0]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))
  }));
  var _exception = dart.privateName(method_channel_task, "_exception");
  var _stackTrace = dart.privateName(method_channel_task, "_stackTrace");
  var _didComplete = dart.privateName(method_channel_task, "_didComplete");
  var _completer = dart.privateName(method_channel_task, "_completer");
  var _stream = dart.privateName(method_channel_task, "_stream");
  var _initialTaskCompleter = dart.privateName(method_channel_task, "_initialTaskCompleter");
  var _snapshot = dart.privateName(method_channel_task, "_snapshot");
  var _handle$ = dart.privateName(method_channel_task, "_handle");
  var _initialTask$ = dart.privateName(method_channel_task, "_initialTask");
  var storage$2 = dart.privateName(method_channel_task, "MethodChannelTask.storage");
  method_channel_task.MethodChannelTask = class MethodChannelTask extends platform_interface_task.TaskPlatform {
    get storage() {
      return this[storage$2];
    }
    set storage(value) {
      super.storage = value;
    }
    get snapshotEvents() {
      return StreamLOfTaskSnapshotPlatformL().as(method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[$_get](this[_handle$]).stream);
    }
    get snapshot() {
      return this[_snapshot];
    }
    get onComplete() {
      return async.async(TaskSnapshotPlatformL(), (function* onComplete() {
        if (dart.test(this[_didComplete]) && this[_exception] == null) {
          return FutureOfTaskSnapshotPlatformL().value(this.snapshot);
        } else if (dart.test(this[_didComplete]) && this[_exception] != null) {
          return exception.catchFuturePlatformException(TaskSnapshotPlatformL(), this[_exception], this[_stackTrace]);
        } else {
          if (this[_completer] == null) {
            this[_completer] = CompleterOfTaskSnapshotPlatformL().new();
          }
          return this[_completer].future;
        }
      }).bind(this));
    }
    pause() {
      return async.async(boolL(), (function* pause() {
        try {
          if (!dart.test(this[_initialTaskCompleter].isCompleted)) {
            yield this[_initialTaskCompleter].future;
          }
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(StringL(), dart.dynamic, "Task#pause", new (IdentityMapOfStringL$dynamic()).from(["handle", this[_handle$]])));
          let success = boolL().as(data[$_get]("status"));
          if (dart.test(success)) {
            this[_snapshot] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.paused, LinkedHashMapOfStringL$dynamic().from(core.Map.as(data[$_get]("snapshot"))));
          }
          return success;
        } catch (e$) {
          let e = dart.getThrown(e$);
          return exception.catchFuturePlatformException(boolL(), e);
        }
      }).bind(this));
    }
    resume() {
      return async.async(boolL(), (function* resume() {
        try {
          if (!dart.test(this[_initialTaskCompleter].isCompleted)) {
            yield this[_initialTaskCompleter].future;
          }
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(StringL(), dart.dynamic, "Task#resume", new (IdentityMapOfStringL$dynamic()).from(["handle", this[_handle$]])));
          let success = boolL().as(data[$_get]("status"));
          if (dart.test(success)) {
            this[_snapshot] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.running, LinkedHashMapOfStringL$dynamic().from(core.Map.as(data[$_get]("snapshot"))));
          }
          return success;
        } catch (e$) {
          let e = dart.getThrown(e$);
          return exception.catchFuturePlatformException(boolL(), e);
        }
      }).bind(this));
    }
    cancel() {
      return async.async(boolL(), (function* cancel() {
        try {
          if (!dart.test(this[_initialTaskCompleter].isCompleted)) {
            yield this[_initialTaskCompleter].future;
          }
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(StringL(), dart.dynamic, "Task#cancel", new (IdentityMapOfStringL$dynamic()).from(["handle", this[_handle$]])));
          let success = boolL().as(data[$_get]("status"));
          if (dart.test(success)) {
            this[_snapshot] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.canceled, LinkedHashMapOfStringL$dynamic().from(core.Map.as(data[$_get]("snapshot"))));
          }
          return success;
        } catch (e$) {
          let e = dart.getThrown(e$);
          return exception.catchFuturePlatformException(boolL(), e);
        }
      }).bind(this));
    }
  };
  (method_channel_task.MethodChannelTask.new = function(_handle, storage, path, _initialTask) {
    this[_exception] = null;
    this[_stackTrace] = null;
    this[_didComplete] = false;
    this[_completer] = null;
    this[_stream] = null;
    this[_initialTaskCompleter] = null;
    this[_snapshot] = null;
    this[_handle$] = _handle;
    this[storage$2] = storage;
    this[_initialTask$] = _initialTask;
    method_channel_task.MethodChannelTask.__proto__.new.call(this);
    this[_initialTaskCompleter] = CompleterOfvoid().new();
    this[_snapshot] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.running, new (IdentityMapOfStringL$dynamic()).from(["path", path, "bytesTransferred", 0, "totalBytes", 1]));
    this[_initialTask$]().then(core.Null, dart.fn(_ => {
      this[_initialTaskCompleter].complete();
    }, voidToNull())).catchError(dart.fn((e, stackTrace) => {
      this[_initialTaskCompleter].completeError(e, stackTrace);
      this[_didComplete] = true;
      this[_exception] = e;
      this[_stackTrace] = stackTrace;
      if (this[_completer] != null) {
        exception.catchFuturePlatformException(dart.dynamic, e, stackTrace).catchError(dart.bind(this[_completer], 'completeError'));
      }
    }, ObjectLAndStackTraceLToNull()));
    this[_stream] = StreamLOfTaskSnapshotPlatformL().as(method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[$_get](this[_handle$]).stream);
    let _subscription = null;
    _subscription = this[_stream].listen(dart.fn(snapshot => async.async(core.Null, (function*() {
      let t0;
      if (this[_snapshot].state != task_state.TaskState.canceled) {
        this[_snapshot] = snapshot;
      }
      if (snapshot.state == task_state.TaskState.success) {
        this[_didComplete] = true;
        t0 = this[_completer];
        t0 == null ? null : t0.complete(snapshot);
        yield _subscription.cancel();
      }
    }).bind(this)), TaskSnapshotPlatformLToFutureLOfNull()), {onError: dart.fn((e, stackTrace) => {
        if (FirebaseExceptionL().is(e) && e.code === "canceled") {
          this[_snapshot] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.canceled, new (IdentityMapOfStringL$dynamic()).from(["path", path, "bytesTransferred", this[_snapshot].bytesTransferred, "totalBytes", this[_snapshot].totalBytes]));
        } else {
          this[_snapshot] = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(this.storage, task_state.TaskState.error, new (IdentityMapOfStringL$dynamic()).from(["path", path, "bytesTransferred", this[_snapshot].bytesTransferred, "totalBytes", this[_snapshot].totalBytes]));
        }
        this[_didComplete] = true;
        this[_exception] = e;
        this[_stackTrace] = stackTrace;
        if (this[_completer] != null) {
          exception.catchFuturePlatformException(dart.dynamic, e, stackTrace).catchError(dart.bind(this[_completer], 'completeError'));
        }
      }, ObjectLAndStackTraceLToNull()), cancelOnError: true});
  }).prototype = method_channel_task.MethodChannelTask.prototype;
  dart.addTypeTests(method_channel_task.MethodChannelTask);
  dart.addTypeCaches(method_channel_task.MethodChannelTask);
  dart.setLibraryUri(method_channel_task.MethodChannelTask, L9);
  dart.setFieldSignature(method_channel_task.MethodChannelTask, () => ({
    __proto__: dart.getFields(method_channel_task.MethodChannelTask.__proto__),
    [_exception]: dart.fieldType(dart.legacy(core.Object)),
    [_stackTrace]: dart.fieldType(dart.legacy(core.StackTrace)),
    [_didComplete]: dart.fieldType(dart.legacy(core.bool)),
    [_completer]: dart.fieldType(dart.legacy(async.Completer$(dart.legacy(platform_interface_task_snapshot.TaskSnapshotPlatform)))),
    [_stream]: dart.fieldType(dart.legacy(async.Stream$(dart.legacy(platform_interface_task_snapshot.TaskSnapshotPlatform)))),
    [_initialTaskCompleter]: dart.fieldType(dart.legacy(async.Completer$(dart.void))),
    [_initialTask$]: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(async.Future$(dart.void)), []))),
    [_handle$]: dart.finalFieldType(dart.legacy(core.int)),
    storage: dart.finalFieldType(dart.legacy(platform_interface_firebase_storage.FirebaseStoragePlatform)),
    [_snapshot]: dart.fieldType(dart.legacy(platform_interface_task_snapshot.TaskSnapshotPlatform))
  }));
  method_channel_task.MethodChannelPutFileTask = class MethodChannelPutFileTask extends method_channel_task.MethodChannelTask {
    static _getTask(handle, storage, path, file, metadata) {
      return dart.fn(() => {
        let t3;
        return method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(dart.void, "Task#startPutFile", new (IdentityMapOfStringL$dynamic()).from(["appName", storage.app.name, "maxOperationRetryTime", storage.maxOperationRetryTime, "maxUploadRetryTime", storage.maxUploadRetryTime, "maxDownloadRetryTime", storage.maxDownloadRetryTime, "bucket", storage.bucket, "handle", handle, "path", path, "filePath", file.absolute.path, "metadata", (t3 = metadata, t3 == null ? null : t3.asMap())]));
      }, VoidToFutureLOfvoid());
    }
  };
  (method_channel_task.MethodChannelPutFileTask.new = function(handle, storage, path, file, metadata) {
    method_channel_task.MethodChannelPutFileTask.__proto__.new.call(this, handle, storage, path, method_channel_task.MethodChannelPutFileTask._getTask(handle, storage, path, file, metadata));
    ;
  }).prototype = method_channel_task.MethodChannelPutFileTask.prototype;
  dart.addTypeTests(method_channel_task.MethodChannelPutFileTask);
  dart.addTypeCaches(method_channel_task.MethodChannelPutFileTask);
  dart.setLibraryUri(method_channel_task.MethodChannelPutFileTask, L9);
  method_channel_task.MethodChannelPutStringTask = class MethodChannelPutStringTask extends method_channel_task.MethodChannelTask {
    static _getTask(handle, storage, path, data, format, metadata) {
      return dart.fn(() => {
        let t3;
        return method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(dart.void, "Task#startPutString", new (IdentityMapOfStringL$dynamic()).from(["appName", storage.app.name, "bucket", storage.bucket, "maxOperationRetryTime", storage.maxOperationRetryTime, "maxUploadRetryTime", storage.maxUploadRetryTime, "maxDownloadRetryTime", storage.maxDownloadRetryTime, "handle", handle, "path", path, "data", data, "format", format.index, "metadata", (t3 = metadata, t3 == null ? null : t3.asMap())]));
      }, VoidToFutureLOfvoid());
    }
  };
  (method_channel_task.MethodChannelPutStringTask.new = function(handle, storage, path, data, format, metadata) {
    method_channel_task.MethodChannelPutStringTask.__proto__.new.call(this, handle, storage, path, method_channel_task.MethodChannelPutStringTask._getTask(handle, storage, path, data, format, metadata));
    ;
  }).prototype = method_channel_task.MethodChannelPutStringTask.prototype;
  dart.addTypeTests(method_channel_task.MethodChannelPutStringTask);
  dart.addTypeCaches(method_channel_task.MethodChannelPutStringTask);
  dart.setLibraryUri(method_channel_task.MethodChannelPutStringTask, L9);
  method_channel_task.MethodChannelPutTask = class MethodChannelPutTask extends method_channel_task.MethodChannelTask {
    static _getTask(handle, storage, path, data, metadata) {
      return dart.fn(() => {
        let t3;
        return method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(dart.void, "Task#startPutData", new (IdentityMapOfStringL$dynamic()).from(["appName", storage.app.name, "bucket", storage.bucket, "maxOperationRetryTime", storage.maxOperationRetryTime, "maxUploadRetryTime", storage.maxUploadRetryTime, "maxDownloadRetryTime", storage.maxDownloadRetryTime, "handle", handle, "path", path, "data", data, "metadata", (t3 = metadata, t3 == null ? null : t3.asMap())]));
      }, VoidToFutureLOfvoid());
    }
  };
  (method_channel_task.MethodChannelPutTask.new = function(handle, storage, path, data, metadata) {
    method_channel_task.MethodChannelPutTask.__proto__.new.call(this, handle, storage, path, method_channel_task.MethodChannelPutTask._getTask(handle, storage, path, data, metadata));
    ;
  }).prototype = method_channel_task.MethodChannelPutTask.prototype;
  dart.addTypeTests(method_channel_task.MethodChannelPutTask);
  dart.addTypeCaches(method_channel_task.MethodChannelPutTask);
  dart.setLibraryUri(method_channel_task.MethodChannelPutTask, L9);
  method_channel_task.MethodChannelDownloadTask = class MethodChannelDownloadTask extends method_channel_task.MethodChannelTask {
    static _getTask(handle, storage, path, file) {
      return dart.fn(() => method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(dart.void, "Task#writeToFile", new (IdentityMapOfStringL$dynamic()).from(["appName", storage.app.name, "maxOperationRetryTime", storage.maxOperationRetryTime, "maxUploadRetryTime", storage.maxUploadRetryTime, "maxDownloadRetryTime", storage.maxDownloadRetryTime, "bucket", storage.bucket, "handle", handle, "path", path, "filePath", file.path])), VoidToFutureLOfvoid());
    }
  };
  (method_channel_task.MethodChannelDownloadTask.new = function(handle, storage, path, file) {
    method_channel_task.MethodChannelDownloadTask.__proto__.new.call(this, handle, storage, path, method_channel_task.MethodChannelDownloadTask._getTask(handle, storage, path, file));
    ;
  }).prototype = method_channel_task.MethodChannelDownloadTask.prototype;
  dart.addTypeTests(method_channel_task.MethodChannelDownloadTask);
  dart.addTypeCaches(method_channel_task.MethodChannelDownloadTask);
  dart.setLibraryUri(method_channel_task.MethodChannelDownloadTask, L9);
  var _items = dart.privateName(method_channel_list_result, "_items");
  var _prefixes = dart.privateName(method_channel_list_result, "_prefixes");
  method_channel_list_result.MethodChannelListResult = class MethodChannelListResult extends platform_interface_list_result.ListResultPlatform {
    get items() {
      return this[_items][$map](MethodChannelReferenceL(), dart.fn(path => new method_channel_reference.MethodChannelReference.new(this.storage, path), StringLToMethodChannelReferenceL()))[$toList]();
    }
    get prefixes() {
      return this[_prefixes][$map](MethodChannelReferenceL(), dart.fn(path => new method_channel_reference.MethodChannelReference.new(this.storage, path), StringLToMethodChannelReferenceL()))[$toList]();
    }
  };
  (method_channel_list_result.MethodChannelListResult.new = function(storage, opts) {
    let t3, t3$;
    let nextPageToken = opts && 'nextPageToken' in opts ? opts.nextPageToken : null;
    let items = opts && 'items' in opts ? opts.items : null;
    let prefixes = opts && 'prefixes' in opts ? opts.prefixes : null;
    this[_items] = (t3 = items, t3 == null ? JSArrayOfStringL().of([]) : t3);
    this[_prefixes] = (t3$ = prefixes, t3$ == null ? JSArrayOfStringL().of([]) : t3$);
    method_channel_list_result.MethodChannelListResult.__proto__.new.call(this, storage, nextPageToken);
    ;
  }).prototype = method_channel_list_result.MethodChannelListResult.prototype;
  dart.addTypeTests(method_channel_list_result.MethodChannelListResult);
  dart.addTypeCaches(method_channel_list_result.MethodChannelListResult);
  dart.setLibraryUri(method_channel_list_result.MethodChannelListResult, L10);
  dart.setFieldSignature(method_channel_list_result.MethodChannelListResult, () => ({
    __proto__: dart.getFields(method_channel_list_result.MethodChannelListResult.__proto__),
    [_items]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    [_prefixes]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  method_channel_reference.MethodChannelReference = class MethodChannelReference extends platform_interface_reference.ReferencePlatform {
    delete() {
      return async.async(dart.void, (function* $delete() {
        try {
          yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(dart.dynamic, "Reference#delete", new (IdentityMapOfStringL$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "path", this.fullPath]));
        } catch (e$) {
          let e = dart.getThrown(e$);
          dart.throw(exception.convertPlatformException(e));
        }
      }).bind(this));
    }
    getDownloadURL() {
      return async.async(StringL(), (function* getDownloadURL() {
        try {
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(StringL(), dart.dynamic, "Reference#getDownloadURL", new (IdentityMapOfStringL$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "path", this.fullPath])));
          return FutureOrLOfStringL().as(data[$_get]("downloadURL"));
        } catch (e$) {
          let e = dart.getThrown(e$);
          dart.throw(exception.convertPlatformException(e));
        }
      }).bind(this));
    }
    getMetadata() {
      return async.async(FullMetadataL(), (function* getMetadata() {
        try {
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(StringL(), dart.dynamic, "Reference#getMetadata", new (IdentityMapOfStringL$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "path", this.fullPath])));
          return new full_metadata.FullMetadata.new(data);
        } catch (e$) {
          let e = dart.getThrown(e$);
          dart.throw(exception.convertPlatformException(e));
        }
      }).bind(this));
    }
    list(options) {
      return async.async(ListResultPlatformL(), (function* list() {
        let t6, t6$, t6$0;
        try {
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(StringL(), dart.dynamic, "Reference#list", new (IdentityMapOfStringL$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "path", this.fullPath, "options", new (IdentityMapOfStringL$dynamic()).from(["maxResults", (t6$ = (t6 = options, t6 == null ? null : t6.maxResults), t6$ == null ? 1000 : t6$), "pageToken", (t6$0 = options, t6$0 == null ? null : t6$0.pageToken)])])));
          return new method_channel_list_result.MethodChannelListResult.new(this.storage, {nextPageToken: StringL().as(data[$_get]("nextPageToken")), items: ListOfStringL().from(core.Iterable.as(data[$_get]("items"))), prefixes: ListOfStringL().from(core.Iterable.as(data[$_get]("prefixes")))});
        } catch (e$) {
          let e = dart.getThrown(e$);
          dart.throw(exception.convertPlatformException(e));
        }
      }).bind(this));
    }
    listAll() {
      return async.async(ListResultPlatformL(), (function* listAll() {
        try {
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(StringL(), dart.dynamic, "Reference#listAll", new (IdentityMapOfStringL$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "path", this.fullPath])));
          return new method_channel_list_result.MethodChannelListResult.new(this.storage, {nextPageToken: StringL().as(data[$_get]("nextPageToken")), items: ListOfStringL().from(core.Iterable.as(data[$_get]("items"))), prefixes: ListOfStringL().from(core.Iterable.as(data[$_get]("prefixes")))});
        } catch (e$) {
          let e = dart.getThrown(e$);
          dart.throw(exception.convertPlatformException(e));
        }
      }).bind(this));
    }
    getData(maxSize) {
      try {
        return method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMethod(Uint8ListL(), "Reference#getData", new (IdentityMapOfStringL$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "path", this.fullPath, "maxSize", maxSize]));
      } catch (e$) {
        let e = dart.getThrown(e$);
        dart.throw(exception.convertPlatformException(e));
      }
    }
    putData(data, metadata = null) {
      let handle = method_channel_firebase_storage.MethodChannelFirebaseStorage.nextMethodChannelHandleId;
      method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[$_set](handle, StreamControllerOfTaskSnapshotPlatformL().broadcast());
      return new method_channel_task.MethodChannelPutTask.new(handle, this.storage, this.fullPath, data, metadata);
    }
    putBlob(data, metadata = null) {
      dart.throw(new core.UnimplementedError.new("putBlob() is not supported on native platforms. Use [put], [putFile] or [putString] instead."));
    }
    putFile(file, metadata = null) {
      let handle = method_channel_firebase_storage.MethodChannelFirebaseStorage.nextMethodChannelHandleId;
      method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[$_set](handle, StreamControllerOfTaskSnapshotPlatformL().broadcast());
      return new method_channel_task.MethodChannelPutFileTask.new(handle, this.storage, this.fullPath, file, metadata);
    }
    putString(data, format, metadata = null) {
      let handle = method_channel_firebase_storage.MethodChannelFirebaseStorage.nextMethodChannelHandleId;
      method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[$_set](handle, StreamControllerOfTaskSnapshotPlatformL().broadcast());
      return new method_channel_task.MethodChannelPutStringTask.new(handle, this.storage, this.fullPath, data, format, metadata);
    }
    updateMetadata(metadata) {
      return async.async(FullMetadataL(), (function* updateMetadata() {
        try {
          let data = (yield method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.invokeMapMethod(StringL(), dart.dynamic, "Reference#updateMetadata", new (IdentityMapOfStringL$dynamic()).from(["appName", this.storage.app.name, "maxOperationRetryTime", this.storage.maxOperationRetryTime, "maxUploadRetryTime", this.storage.maxUploadRetryTime, "maxDownloadRetryTime", this.storage.maxDownloadRetryTime, "bucket", this.storage.bucket, "path", this.fullPath, "metadata", metadata.asMap()])));
          return new full_metadata.FullMetadata.new(data);
        } catch (e$) {
          let e = dart.getThrown(e$);
          dart.throw(exception.convertPlatformException(e));
        }
      }).bind(this));
    }
    writeToFile(file) {
      let handle = method_channel_firebase_storage.MethodChannelFirebaseStorage.nextMethodChannelHandleId;
      method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[$_set](handle, StreamControllerOfTaskSnapshotPlatformL().broadcast());
      return new method_channel_task.MethodChannelDownloadTask.new(handle, this.storage, this.fullPath, file);
    }
  };
  (method_channel_reference.MethodChannelReference.new = function(storage, path) {
    method_channel_reference.MethodChannelReference.__proto__.new.call(this, storage, path);
    ;
  }).prototype = method_channel_reference.MethodChannelReference.prototype;
  dart.addTypeTests(method_channel_reference.MethodChannelReference);
  dart.addTypeCaches(method_channel_reference.MethodChannelReference);
  dart.setLibraryUri(method_channel_reference.MethodChannelReference, L11);
  var _handleTaskStateChange = dart.privateName(method_channel_firebase_storage, "_handleTaskStateChange");
  var _sendTaskException = dart.privateName(method_channel_firebase_storage, "_sendTaskException");
  var appInstance$ = dart.privateName(platform_interface_firebase_storage, "FirebaseStoragePlatform.appInstance");
  var bucket$ = dart.privateName(platform_interface_firebase_storage, "FirebaseStoragePlatform.bucket");
  platform_interface_firebase_storage.FirebaseStoragePlatform = class FirebaseStoragePlatform extends plugin_platform_interface.PlatformInterface {
    get appInstance() {
      return this[appInstance$];
    }
    set appInstance(value) {
      super.appInstance = value;
    }
    get bucket() {
      return this[bucket$];
    }
    set bucket(value) {
      super.bucket = value;
    }
    static instanceFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      let bucket = opts && 'bucket' in opts ? opts.bucket : null;
      return platform_interface_firebase_storage.FirebaseStoragePlatform.instance.delegateFor({app: app, bucket: bucket});
    }
    get app() {
      if (this.appInstance == null) {
        return firebase_core.Firebase.app();
      }
      return this.appInstance;
    }
    static get instance() {
      if (platform_interface_firebase_storage.FirebaseStoragePlatform._instance == null) {
        platform_interface_firebase_storage.FirebaseStoragePlatform._instance = method_channel_firebase_storage.MethodChannelFirebaseStorage.instance;
      }
      return platform_interface_firebase_storage.FirebaseStoragePlatform._instance;
    }
    static set instance(instance) {
      if (!(instance != null)) dart.assertFailed(null, L12, 61, 12, "instance != null");
      plugin_platform_interface.PlatformInterface.verifyToken(instance, platform_interface_firebase_storage.FirebaseStoragePlatform._token);
      platform_interface_firebase_storage.FirebaseStoragePlatform._instance = instance;
    }
    get maxOperationRetryTime() {
      dart.throw(new core.UnimplementedError.new("get.maxOperationRetryTime is not implemented"));
    }
    get maxUploadRetryTime() {
      dart.throw(new core.UnimplementedError.new("get.maxUploadRetryTime is not implemented"));
    }
    get maxDownloadRetryTime() {
      dart.throw(new core.UnimplementedError.new("get.maxDownloadRetryTime is not implemented"));
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      let bucket = opts && 'bucket' in opts ? opts.bucket : null;
      dart.throw(new core.UnimplementedError.new("delegateFor() is not implemented"));
    }
    ref(path) {
      dart.throw(new core.UnimplementedError.new("ref() is not implemented"));
    }
    setMaxOperationRetryTime(time) {
      dart.throw(new core.UnimplementedError.new("setMaxOperationRetryTime() is not implemented"));
    }
    setMaxUploadRetryTime(time) {
      dart.throw(new core.UnimplementedError.new("setMaxUploadRetryTime() is not implemented"));
    }
    setMaxDownloadRetryTime(time) {
      dart.throw(new core.UnimplementedError.new("setMaxDownloadRetryTime() is not implemented"));
    }
  };
  (platform_interface_firebase_storage.FirebaseStoragePlatform.new = function(opts) {
    let appInstance = opts && 'appInstance' in opts ? opts.appInstance : null;
    let bucket = opts && 'bucket' in opts ? opts.bucket : null;
    this[appInstance$] = appInstance;
    this[bucket$] = bucket;
    platform_interface_firebase_storage.FirebaseStoragePlatform.__proto__.new.call(this, {token: platform_interface_firebase_storage.FirebaseStoragePlatform._token});
    ;
  }).prototype = platform_interface_firebase_storage.FirebaseStoragePlatform.prototype;
  dart.addTypeTests(platform_interface_firebase_storage.FirebaseStoragePlatform);
  dart.addTypeCaches(platform_interface_firebase_storage.FirebaseStoragePlatform);
  dart.setMethodSignature(platform_interface_firebase_storage.FirebaseStoragePlatform, () => ({
    __proto__: dart.getMethods(platform_interface_firebase_storage.FirebaseStoragePlatform.__proto__),
    delegateFor: dart.fnType(dart.legacy(platform_interface_firebase_storage.FirebaseStoragePlatform), [], {app: dart.legacy(firebase_core.FirebaseApp), bucket: dart.legacy(core.String)}, {}),
    ref: dart.fnType(dart.legacy(platform_interface_reference.ReferencePlatform), [dart.legacy(core.String)]),
    setMaxOperationRetryTime: dart.fnType(dart.void, [dart.legacy(core.int)]),
    setMaxUploadRetryTime: dart.fnType(dart.void, [dart.legacy(core.int)]),
    setMaxDownloadRetryTime: dart.fnType(dart.void, [dart.legacy(core.int)])
  }));
  dart.setGetterSignature(platform_interface_firebase_storage.FirebaseStoragePlatform, () => ({
    __proto__: dart.getGetters(platform_interface_firebase_storage.FirebaseStoragePlatform.__proto__),
    app: dart.legacy(firebase_core.FirebaseApp),
    maxOperationRetryTime: dart.legacy(core.int),
    maxUploadRetryTime: dart.legacy(core.int),
    maxDownloadRetryTime: dart.legacy(core.int)
  }));
  dart.setLibraryUri(platform_interface_firebase_storage.FirebaseStoragePlatform, L13);
  dart.setFieldSignature(platform_interface_firebase_storage.FirebaseStoragePlatform, () => ({
    __proto__: dart.getFields(platform_interface_firebase_storage.FirebaseStoragePlatform.__proto__),
    appInstance: dart.finalFieldType(dart.legacy(firebase_core.FirebaseApp)),
    bucket: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(platform_interface_firebase_storage.FirebaseStoragePlatform, {
    /*platform_interface_firebase_storage.FirebaseStoragePlatform._token*/get _token() {
      return new core.Object.new();
    },
    /*platform_interface_firebase_storage.FirebaseStoragePlatform._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, true);
  var maxOperationRetryTime = dart.privateName(method_channel_firebase_storage, "MethodChannelFirebaseStorage.maxOperationRetryTime");
  var maxUploadRetryTime = dart.privateName(method_channel_firebase_storage, "MethodChannelFirebaseStorage.maxUploadRetryTime");
  var maxDownloadRetryTime = dart.privateName(method_channel_firebase_storage, "MethodChannelFirebaseStorage.maxDownloadRetryTime");
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var C2;
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var C1;
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  var C0;
  method_channel_firebase_storage.MethodChannelFirebaseStorage = class MethodChannelFirebaseStorage extends platform_interface_firebase_storage.FirebaseStoragePlatform {
    get maxOperationRetryTime() {
      return this[maxOperationRetryTime];
    }
    set maxOperationRetryTime(value) {
      this[maxOperationRetryTime] = value;
    }
    get maxUploadRetryTime() {
      return this[maxUploadRetryTime];
    }
    set maxUploadRetryTime(value) {
      this[maxUploadRetryTime] = value;
    }
    get maxDownloadRetryTime() {
      return this[maxDownloadRetryTime];
    }
    set maxDownloadRetryTime(value) {
      this[maxDownloadRetryTime] = value;
    }
    static _getInstanceKey(appName, bucket) {
      let t10;
      return dart.str(appName) + "|" + dart.str((t10 = bucket, t10 == null ? "" : t10));
    }
    static get instance() {
      return new method_channel_firebase_storage.MethodChannelFirebaseStorage.__();
    }
    static get nextMethodChannelHandleId() {
      let t10;
      t10 = method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelHandleId;
      method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelHandleId = dart.notNull(t10) + 1;
      return t10;
    }
    [_handleTaskStateChange](taskState, $arguments) {
      return async.async(dart.void, function* _handleTaskStateChange() {
        let snapshotData = LinkedHashMapOfStringL$dynamic().from(core.Map.as($arguments[$_get]("snapshot")));
        let storage = method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelFirebaseStorageInstances[$_get](method_channel_firebase_storage.MethodChannelFirebaseStorage._getInstanceKey(StringL().as($arguments[$_get]("appName")), StringL().as($arguments[$_get]("bucket"))));
        let snapshot = new method_channel_task_snapshot.MethodChannelTaskSnapshot.new(storage, taskState, snapshotData);
        method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[$_get]($arguments[$_get]("handle")).add(snapshot);
      });
    }
    [_sendTaskException](handle, exception) {
      method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers[$_get](handle).addError(exception);
    }
    delegateFor(opts) {
      let app = opts && 'app' in opts ? opts.app : null;
      let bucket = opts && 'bucket' in opts ? opts.bucket : null;
      let key = method_channel_firebase_storage.MethodChannelFirebaseStorage._getInstanceKey(app.name, bucket);
      if (!dart.test(method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelFirebaseStorageInstances[$containsKey](key))) {
        method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelFirebaseStorageInstances[$_set](key, new method_channel_firebase_storage.MethodChannelFirebaseStorage.new({app: app, bucket: bucket}));
      }
      return method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelFirebaseStorageInstances[$_get](key);
    }
    ref(path) {
      return new method_channel_reference.MethodChannelReference.new(this, path);
    }
    setMaxOperationRetryTime(time) {
      this.maxOperationRetryTime = time;
    }
    setMaxUploadRetryTime(time) {
      return async.async(dart.void, (function* setMaxUploadRetryTime() {
        this.maxUploadRetryTime = time;
      }).bind(this));
    }
    setMaxDownloadRetryTime(time) {
      return async.async(dart.void, (function* setMaxDownloadRetryTime() {
        this.maxDownloadRetryTime = time;
      }).bind(this));
    }
  };
  (method_channel_firebase_storage.MethodChannelFirebaseStorage.__ = function() {
    this[maxOperationRetryTime] = new core.Duration.new({minutes: 2}).inMilliseconds;
    this[maxUploadRetryTime] = new core.Duration.new({minutes: 10}).inMilliseconds;
    this[maxDownloadRetryTime] = new core.Duration.new({minutes: 10}).inMilliseconds;
    method_channel_firebase_storage.MethodChannelFirebaseStorage.__proto__.new.call(this, {appInstance: null});
    ;
  }).prototype = method_channel_firebase_storage.MethodChannelFirebaseStorage.prototype;
  (method_channel_firebase_storage.MethodChannelFirebaseStorage.new = function(opts) {
    let app = opts && 'app' in opts ? opts.app : null;
    let bucket = opts && 'bucket' in opts ? opts.bucket : null;
    this[maxOperationRetryTime] = new core.Duration.new({minutes: 2}).inMilliseconds;
    this[maxUploadRetryTime] = new core.Duration.new({minutes: 10}).inMilliseconds;
    this[maxDownloadRetryTime] = new core.Duration.new({minutes: 10}).inMilliseconds;
    method_channel_firebase_storage.MethodChannelFirebaseStorage.__proto__.new.call(this, {appInstance: app, bucket: bucket});
    if (dart.test(method_channel_firebase_storage.MethodChannelFirebaseStorage._initialized)) return;
    method_channel_firebase_storage.MethodChannelFirebaseStorage.channel.setMethodCallHandler(dart.fn(call => async.async(dart.void, (function*() {
      let $arguments = MapL().as(call.arguments);
      switch (call.method) {
        case "Task#onProgress":
        {
          return this[_handleTaskStateChange](task_state.TaskState.running, $arguments);
        }
        case "Task#onPaused":
        {
          return this[_handleTaskStateChange](task_state.TaskState.paused, $arguments);
        }
        case "Task#onSuccess":
        {
          return this[_handleTaskStateChange](task_state.TaskState.success, $arguments);
        }
        case "Task#onCanceled":
        {
          return this[_sendTaskException](intL().as($arguments[$_get]("handle")), new firebase_core_platform_interface.FirebaseException.new({plugin: "firebase_storage", code: "canceled", message: "User canceled the upload/download."}));
        }
        case "Task#onFailure":
        {
          let errorMap = LinkedHashMapOfStringL$dynamic().from(core.Map.as($arguments[$_get]("error")));
          return this[_sendTaskException](intL().as($arguments[$_get]("handle")), new firebase_core_platform_interface.FirebaseException.new({plugin: "firebase_storage", code: StringL().as(errorMap[$_get]("code")), message: StringL().as(errorMap[$_get]("message"))}));
        }
      }
    }).bind(this)), MethodCallLToFutureLOfvoid()));
    method_channel_firebase_storage.MethodChannelFirebaseStorage._initialized = true;
  }).prototype = method_channel_firebase_storage.MethodChannelFirebaseStorage.prototype;
  dart.addTypeTests(method_channel_firebase_storage.MethodChannelFirebaseStorage);
  dart.addTypeCaches(method_channel_firebase_storage.MethodChannelFirebaseStorage);
  dart.setMethodSignature(method_channel_firebase_storage.MethodChannelFirebaseStorage, () => ({
    __proto__: dart.getMethods(method_channel_firebase_storage.MethodChannelFirebaseStorage.__proto__),
    [_handleTaskStateChange]: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(task_state.TaskState), dart.legacy(core.Map)]),
    [_sendTaskException]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(firebase_core_platform_interface.FirebaseException)]),
    setMaxDownloadRetryTime: dart.fnType(dart.legacy(async.Future$(dart.void)), [dart.legacy(core.int)])
  }));
  dart.setLibraryUri(method_channel_firebase_storage.MethodChannelFirebaseStorage, L14);
  dart.setFieldSignature(method_channel_firebase_storage.MethodChannelFirebaseStorage, () => ({
    __proto__: dart.getFields(method_channel_firebase_storage.MethodChannelFirebaseStorage.__proto__),
    maxOperationRetryTime: dart.fieldType(dart.legacy(core.int)),
    maxUploadRetryTime: dart.fieldType(dart.legacy(core.int)),
    maxDownloadRetryTime: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineLazy(method_channel_firebase_storage.MethodChannelFirebaseStorage, {
    /*method_channel_firebase_storage.MethodChannelFirebaseStorage._initialized*/get _initialized() {
      return false;
    },
    set _initialized(_) {},
    /*method_channel_firebase_storage.MethodChannelFirebaseStorage.channel*/get channel() {
      return C0 || CT.C0;
    },
    /*method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelFirebaseStorageInstances*/get _methodChannelFirebaseStorageInstances() {
      return new (IdentityMapOfStringL$MethodChannelFirebaseStorageL()).new();
    },
    set _methodChannelFirebaseStorageInstances(_) {},
    /*method_channel_firebase_storage.MethodChannelFirebaseStorage._methodChannelHandleId*/get _methodChannelHandleId() {
      return 0;
    },
    set _methodChannelHandleId(_) {},
    /*method_channel_firebase_storage.MethodChannelFirebaseStorage.taskObservers*/get taskObservers() {
      return new (IdentityMapOfintL$StreamControllerLOfTaskSnapshotPlatformL()).new();
    }
  }, true);
  dart.trackLibraries("packages/firebase_storage_platform_interface/src/platform_interface/platform_interface_task_snapshot.dart", {
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_task_snapshot.dart": platform_interface_task_snapshot,
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_task.dart": platform_interface_task,
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_list_result.dart": platform_interface_list_result,
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_reference.dart": platform_interface_reference,
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_task_snapshot.dart": method_channel_task_snapshot,
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_task.dart": method_channel_task,
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_list_result.dart": method_channel_list_result,
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_reference.dart": method_channel_reference,
    "package:firebase_storage_platform_interface/src/method_channel/method_channel_firebase_storage.dart": method_channel_firebase_storage,
    "package:firebase_storage_platform_interface/src/platform_interface/platform_interface_firebase_storage.dart": platform_interface_firebase_storage,
    "package:firebase_storage_platform_interface/firebase_storage_platform_interface.dart": firebase_storage_platform_interface
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["platform_interface_task_snapshot.dart","platform_interface_task.dart","platform_interface_list_result.dart","platform_interface_reference.dart","../method_channel/method_channel_task_snapshot.dart","../method_channel/method_channel_task.dart","../method_channel/method_channel_list_result.dart","../method_channel/method_channel_reference.dart","platform_interface_firebase_storage.dart","../method_channel/method_channel_firebase_storage.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../../D:/packages/firebase_storage_platform_interface/src/platform_interface/platform_interface_task_snapshot.dart.lib.js"}');
  // Exports:
  return {
    src__platform_interface__platform_interface_task_snapshot: platform_interface_task_snapshot,
    src__platform_interface__platform_interface_task: platform_interface_task,
    src__platform_interface__platform_interface_list_result: platform_interface_list_result,
    src__platform_interface__platform_interface_reference: platform_interface_reference,
    src__method_channel__method_channel_task_snapshot: method_channel_task_snapshot,
    src__method_channel__method_channel_task: method_channel_task,
    src__method_channel__method_channel_list_result: method_channel_list_result,
    src__method_channel__method_channel_reference: method_channel_reference,
    src__method_channel__method_channel_firebase_storage: method_channel_firebase_storage,
    src__platform_interface__platform_interface_firebase_storage: platform_interface_firebase_storage,
    firebase_storage_platform_interface: firebase_storage_platform_interface
  };
}));

//# sourceMappingURL=platform_interface_task_snapshot.dart.lib.js.map
